---
import type { PixelArtsEntry } from "@/types";

interface Props {
  entry: PixelArtsEntry;
}

const { entry } = Astro.props;
const { title, image, imageAlt } = entry.data;

// Get the raw image src (bypassing Astro's image optimization)
const imageSrc = image ? image.src : null;
---

<div class="m-2 intersect:animate-fadeUp opacity-0">
  <div 
    class="hover:opacity-90 block cursor-default" 
    title={title}
  >
    <div class="relative rounded-lg overflow-hidden flex items-center justify-center">
      {
        imageSrc && (
          <img
            class="pixel-art-image hover:scale-[102%] transition-all duration-300"
            src={imageSrc}
            alt={imageAlt}
            loading="eager"
            onload="resizePixelArt(this)"
          />
        )
      }
    </div>
  </div>
</div>

<script>
  function resizePixelArt(img) {
    const aspectRatio = img.naturalWidth / img.naturalHeight;
    const width = img.naturalWidth;
    const height = img.naturalHeight;
    
    // Remove any existing size classes
    img.classList.remove('desktop-wallpaper', 'phone-wallpaper', 'square-art', 'banner-art', 'icon-art');
    
    // Determine the type of image and apply appropriate sizing
    if (aspectRatio > 2) {
      // Very wide images (banners, headers)
      img.classList.add('banner-art');
    } else if (aspectRatio > 1.5) {
      // Wide images (desktop wallpapers, landscapes)
      img.classList.add('desktop-wallpaper');
    } else if (aspectRatio < 0.7) {
      // Tall images (phone wallpapers, portraits)
      img.classList.add('phone-wallpaper');
    } else if (aspectRatio >= 0.9 && aspectRatio <= 1.1) {
      // Square or nearly square images
      img.classList.add('square-art');
    } else if (width <= 128 && height <= 128) {
      // Small images (icons, avatars)
      img.classList.add('icon-art');
    } else {
      // Default sizing for other ratios
      img.classList.add('square-art');
    }
  }
</script>

<style>
  .pixel-art-image {
    /* Ensure pixel art renders crisp */
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    image-rendering: -webkit-optimize-contrast;
    -ms-interpolation-mode: nearest-neighbor;
    
    /* Base styling */
    display: block;
    margin: 0 auto;
    border-radius: 8px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.1);
  }
  
  /* Desktop wallpapers and landscapes */
  .pixel-art-image.desktop-wallpaper {
    max-width: 480px;
    max-height: 270px;
    width: auto;
    height: auto;
  }
  
  /* Phone wallpapers and portraits */
  .pixel-art-image.phone-wallpaper {
    max-width: 200px;
    max-height: 400px;
    width: auto;
    height: auto;
  }
  
  /* Square artwork */
  .pixel-art-image.square-art {
    max-width: 320px;
    max-height: 320px;
    width: auto;
    height: auto;
  }
  
  /* Banner/header artwork */
  .pixel-art-image.banner-art {
    max-width: 600px;
    max-height: 200px;
    width: auto;
    height: auto;
  }
  
  /* Small icons and avatars */
  .pixel-art-image.icon-art {
    max-width: 128px;
    max-height: 128px;
    width: auto;
    height: auto;
    /* Scale up small images to be more visible */
    transform: scale(2);
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .pixel-art-image.desktop-wallpaper {
      max-width: 300px;
      max-height: 169px;
    }
    
    .pixel-art-image.phone-wallpaper {
      max-width: 150px;
      max-height: 300px;
    }
    
    .pixel-art-image.square-art {
      max-width: 250px;
      max-height: 250px;
    }
    
    .pixel-art-image.banner-art {
      max-width: 100%;
      max-height: 150px;
    }
    
    .pixel-art-image.icon-art {
      transform: scale(1.5);
    }
  }
</style>